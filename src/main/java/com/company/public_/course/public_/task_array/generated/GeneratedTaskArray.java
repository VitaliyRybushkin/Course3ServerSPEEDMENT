package com.company.public_.course.public_.task_array.generated;

import com.company.public_.course.public_.task.Task;
import com.company.public_.course.public_.task_array.TaskArray;
import com.company.public_.course.public_.variant.Variant;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.enterprise.datastore.runtime.field.DatastoreFields;
import com.speedment.runtime.config.identifier.ColumnIdentifier;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.core.manager.Manager;
import com.speedment.runtime.field.IntField;
import com.speedment.runtime.field.IntForeignKeyField;
import com.speedment.runtime.typemapper.TypeMapper;

/**
 * The generated base for the {@link
 * com.company.public_.course.public_.task_array.TaskArray}-interface
 * representing entities of the {@code task_array}-table in the database.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public interface GeneratedTaskArray {
    
    /**
     * This Field corresponds to the {@link TaskArray} field that can be
     * obtained using the {@link TaskArray#getId()} method.
     */
    IntField<TaskArray, Integer> ID = DatastoreFields.createIntField(
        Identifier.ID,
        TaskArray::getId,
        TaskArray::setId,
        TypeMapper.primitive(),
        true
    );
    /**
     * This Field corresponds to the {@link TaskArray} field that can be
     * obtained using the {@link TaskArray#getVariantId()} method.
     */
    IntForeignKeyField<TaskArray, Integer, Variant> VARIANT_ID = DatastoreFields.createIntForeignKeyField(
        Identifier.VARIANT_ID,
        TaskArray::getVariantId,
        TaskArray::setVariantId,
        Variant.ID,
        TypeMapper.primitive(),
        false
    );
    /**
     * This Field corresponds to the {@link TaskArray} field that can be
     * obtained using the {@link TaskArray#getTaskId()} method.
     */
    IntForeignKeyField<TaskArray, Integer, Task> TASK_ID = DatastoreFields.createIntForeignKeyField(
        Identifier.TASK_ID,
        TaskArray::getTaskId,
        TaskArray::setTaskId,
        Task.ID,
        TypeMapper.primitive(),
        false
    );
    
    /**
     * Returns the id of this TaskArray. The id field corresponds to the
     * database column Course.public.task_array.id.
     * 
     * @return the id of this TaskArray
     */
    int getId();
    
    /**
     * Returns the variantId of this TaskArray. The variantId field corresponds
     * to the database column Course.public.task_array.variant_id.
     * 
     * @return the variantId of this TaskArray
     */
    int getVariantId();
    
    /**
     * Returns the taskId of this TaskArray. The taskId field corresponds to the
     * database column Course.public.task_array.task_id.
     * 
     * @return the taskId of this TaskArray
     */
    int getTaskId();
    
    /**
     * Sets the id of this TaskArray. The id field corresponds to the database
     * column Course.public.task_array.id.
     * 
     * @param id to set of this TaskArray
     * @return   this TaskArray instance
     */
    TaskArray setId(int id);
    
    /**
     * Sets the variantId of this TaskArray. The variantId field corresponds to
     * the database column Course.public.task_array.variant_id.
     * 
     * @param variantId to set of this TaskArray
     * @return          this TaskArray instance
     */
    TaskArray setVariantId(int variantId);
    
    /**
     * Sets the taskId of this TaskArray. The taskId field corresponds to the
     * database column Course.public.task_array.task_id.
     * 
     * @param taskId to set of this TaskArray
     * @return       this TaskArray instance
     */
    TaskArray setTaskId(int taskId);
    
    /**
     * Queries the specified manager for the referenced Variant. If no such
     * Variant exists, an {@code NullPointerException} will be thrown.
     * 
     * @param foreignManager the manager to query for the entity
     * @return               the foreign entity referenced
     */
    Variant findVariantId(Manager<Variant> foreignManager);
    
    /**
     * Queries the specified manager for the referenced Task. If no such Task
     * exists, an {@code NullPointerException} will be thrown.
     * 
     * @param foreignManager the manager to query for the entity
     * @return               the foreign entity referenced
     */
    Task findTaskId(Manager<Task> foreignManager);
    
    enum Identifier implements ColumnIdentifier<TaskArray> {
        
        ID         ("id"),
        VARIANT_ID ("variant_id"),
        TASK_ID    ("task_id");
        
        private final String columnId;
        private final TableIdentifier<TaskArray> tableIdentifier;
        
        Identifier(String columnId) {
            this.columnId        = columnId;
            this.tableIdentifier = TableIdentifier.of(    getDbmsId(), 
                getSchemaId(), 
                getTableId());
        }
        
        @Override
        public String getDbmsId() {
            return "Course";
        }
        
        @Override
        public String getSchemaId() {
            return "public";
        }
        
        @Override
        public String getTableId() {
            return "task_array";
        }
        
        @Override
        public String getColumnId() {
            return this.columnId;
        }
        
        @Override
        public TableIdentifier<TaskArray> asTableIdentifier() {
            return this.tableIdentifier;
        }
    }
}