package com.company.public_.course.public_.student.generated;

import com.company.public_.course.public_.student.Student;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.enterprise.datastore.runtime.field.DatastoreFields;
import com.speedment.runtime.config.identifier.ColumnIdentifier;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.field.IntField;
import com.speedment.runtime.field.StringField;
import com.speedment.runtime.typemapper.TypeMapper;

/**
 * The generated base for the {@link
 * com.company.public_.course.public_.student.Student}-interface representing
 * entities of the {@code student}-table in the database.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public interface GeneratedStudent {
    
    /**
     * This Field corresponds to the {@link Student} field that can be obtained
     * using the {@link Student#getId()} method.
     */
    IntField<Student, Integer> ID = DatastoreFields.createIntField(
        Identifier.ID,
        Student::getId,
        Student::setId,
        TypeMapper.primitive(),
        true
    );
    /**
     * This Field corresponds to the {@link Student} field that can be obtained
     * using the {@link Student#getLogin()} method.
     */
    StringField<Student, String> LOGIN = DatastoreFields.createStringField(
        Identifier.LOGIN,
        Student::getLogin,
        Student::setLogin,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link Student} field that can be obtained
     * using the {@link Student#getPassword()} method.
     */
    StringField<Student, String> PASSWORD = DatastoreFields.createStringField(
        Identifier.PASSWORD,
        Student::getPassword,
        Student::setPassword,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link Student} field that can be obtained
     * using the {@link Student#getInfo()} method.
     */
    StringField<Student, String> INFO = DatastoreFields.createStringField(
        Identifier.INFO,
        Student::getInfo,
        Student::setInfo,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link Student} field that can be obtained
     * using the {@link Student#getFullname()} method.
     */
    StringField<Student, String> FULLNAME = DatastoreFields.createStringField(
        Identifier.FULLNAME,
        Student::getFullname,
        Student::setFullname,
        TypeMapper.identity(),
        false
    );
    
    /**
     * Returns the id of this Student. The id field corresponds to the database
     * column Course.public.student.id.
     * 
     * @return the id of this Student
     */
    int getId();
    
    /**
     * Returns the login of this Student. The login field corresponds to the
     * database column Course.public.student.login.
     * 
     * @return the login of this Student
     */
    String getLogin();
    
    /**
     * Returns the password of this Student. The password field corresponds to
     * the database column Course.public.student.password.
     * 
     * @return the password of this Student
     */
    String getPassword();
    
    /**
     * Returns the info of this Student. The info field corresponds to the
     * database column Course.public.student.info.
     * 
     * @return the info of this Student
     */
    String getInfo();
    
    /**
     * Returns the fullname of this Student. The fullname field corresponds to
     * the database column Course.public.student.fullname.
     * 
     * @return the fullname of this Student
     */
    String getFullname();
    
    /**
     * Sets the id of this Student. The id field corresponds to the database
     * column Course.public.student.id.
     * 
     * @param id to set of this Student
     * @return   this Student instance
     */
    Student setId(int id);
    
    /**
     * Sets the login of this Student. The login field corresponds to the
     * database column Course.public.student.login.
     * 
     * @param login to set of this Student
     * @return      this Student instance
     */
    Student setLogin(String login);
    
    /**
     * Sets the password of this Student. The password field corresponds to the
     * database column Course.public.student.password.
     * 
     * @param password to set of this Student
     * @return         this Student instance
     */
    Student setPassword(String password);
    
    /**
     * Sets the info of this Student. The info field corresponds to the database
     * column Course.public.student.info.
     * 
     * @param info to set of this Student
     * @return     this Student instance
     */
    Student setInfo(String info);
    
    /**
     * Sets the fullname of this Student. The fullname field corresponds to the
     * database column Course.public.student.fullname.
     * 
     * @param fullname to set of this Student
     * @return         this Student instance
     */
    Student setFullname(String fullname);
    
    enum Identifier implements ColumnIdentifier<Student> {
        
        ID       ("id"),
        LOGIN    ("login"),
        PASSWORD ("password"),
        INFO     ("info"),
        FULLNAME ("fullname");
        
        private final String columnId;
        private final TableIdentifier<Student> tableIdentifier;
        
        Identifier(String columnId) {
            this.columnId        = columnId;
            this.tableIdentifier = TableIdentifier.of(    getDbmsId(), 
                getSchemaId(), 
                getTableId());
        }
        
        @Override
        public String getDbmsId() {
            return "Course";
        }
        
        @Override
        public String getSchemaId() {
            return "public";
        }
        
        @Override
        public String getTableId() {
            return "student";
        }
        
        @Override
        public String getColumnId() {
            return this.columnId;
        }
        
        @Override
        public TableIdentifier<Student> asTableIdentifier() {
            return this.tableIdentifier;
        }
    }
}