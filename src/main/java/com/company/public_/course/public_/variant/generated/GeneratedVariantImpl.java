package com.company.public_.course.public_.variant.generated;

import com.company.public_.course.public_.variant.Variant;
import com.speedment.common.annotation.GeneratedCode;

import java.util.Objects;
import java.util.StringJoiner;

/**
 * The generated base implementation of the {@link
 * com.company.public_.course.public_.variant.Variant}-interface.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public abstract class GeneratedVariantImpl implements Variant {
    
    private int id;
    private String info;
    
    protected GeneratedVariantImpl() {}
    
    @Override
    public int getId() {
        return id;
    }
    
    @Override
    public String getInfo() {
        return info;
    }
    
    @Override
    public Variant setId(int id) {
        this.id = id;
        return this;
    }
    
    @Override
    public Variant setInfo(String info) {
        this.info = info;
        return this;
    }
    
    @Override
    public String toString() {
        final StringJoiner sj = new StringJoiner(", ", "{ ", " }");
        sj.add("id = "   + Objects.toString(getId()));
        sj.add("info = " + Objects.toString(getInfo()));
        return "VariantImpl " + sj.toString();
    }
    
    @Override
    public boolean equals(Object that) {
        if (this == that) { return true; }
        if (!(that instanceof Variant)) { return false; }
        final Variant thatVariant = (Variant)that;
        if (this.getId() != thatVariant.getId()) { return false; }
        if (!Objects.equals(this.getInfo(), thatVariant.getInfo())) { return false; }
        return true;
    }
    
    @Override
    public int hashCode() {
        int hash = 7;
        hash = 31 * hash + Integer.hashCode(getId());
        hash = 31 * hash + Objects.hashCode(getInfo());
        return hash;
    }
}