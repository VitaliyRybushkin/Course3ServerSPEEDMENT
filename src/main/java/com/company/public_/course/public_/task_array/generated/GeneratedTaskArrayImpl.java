package com.company.public_.course.public_.task_array.generated;

import com.company.public_.course.public_.task.Task;
import com.company.public_.course.public_.task_array.TaskArray;
import com.company.public_.course.public_.variant.Variant;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.runtime.core.manager.Manager;

import java.util.Objects;
import java.util.StringJoiner;

/**
 * The generated base implementation of the {@link
 * com.company.public_.course.public_.task_array.TaskArray}-interface.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public abstract class GeneratedTaskArrayImpl implements TaskArray {
    
    private int id;
    private int variantId;
    private int taskId;
    
    protected GeneratedTaskArrayImpl() {}
    
    @Override
    public int getId() {
        return id;
    }
    
    @Override
    public int getVariantId() {
        return variantId;
    }
    
    @Override
    public int getTaskId() {
        return taskId;
    }
    
    @Override
    public TaskArray setId(int id) {
        this.id = id;
        return this;
    }
    
    @Override
    public TaskArray setVariantId(int variantId) {
        this.variantId = variantId;
        return this;
    }
    
    @Override
    public TaskArray setTaskId(int taskId) {
        this.taskId = taskId;
        return this;
    }
    
    @Override
    public Variant findVariantId(Manager<Variant> foreignManager) {
        return foreignManager.stream().filter(Variant.ID.equal(getVariantId())).findAny().orElse(null);
    }
    
    @Override
    public Task findTaskId(Manager<Task> foreignManager) {
        return foreignManager.stream().filter(Task.ID.equal(getTaskId())).findAny().orElse(null);
    }
    
    @Override
    public String toString() {
        final StringJoiner sj = new StringJoiner(", ", "{ ", " }");
        sj.add("id = "        + Objects.toString(getId()));
        sj.add("variantId = " + Objects.toString(getVariantId()));
        sj.add("taskId = "    + Objects.toString(getTaskId()));
        return "TaskArrayImpl " + sj.toString();
    }
    
    @Override
    public boolean equals(Object that) {
        if (this == that) { return true; }
        if (!(that instanceof TaskArray)) { return false; }
        final TaskArray thatTaskArray = (TaskArray)that;
        if (this.getId() != thatTaskArray.getId()) { return false; }
        if (this.getVariantId() != thatTaskArray.getVariantId()) { return false; }
        if (this.getTaskId() != thatTaskArray.getTaskId()) { return false; }
        return true;
    }
    
    @Override
    public int hashCode() {
        int hash = 7;
        hash = 31 * hash + Integer.hashCode(getId());
        hash = 31 * hash + Integer.hashCode(getVariantId());
        hash = 31 * hash + Integer.hashCode(getTaskId());
        return hash;
    }
}