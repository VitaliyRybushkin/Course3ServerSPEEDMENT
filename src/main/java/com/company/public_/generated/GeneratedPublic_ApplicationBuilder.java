package com.company.public_.generated;

import com.company.public_.Public_Application;
import com.company.public_.Public_ApplicationBuilder;
import com.company.public_.Public_ApplicationImpl;
import com.company.public_.Public_CacheReloader;
import com.company.public_.Public_InjectorProxy;
import com.company.public_.course.public_.student.StudentManagerImpl;
import com.company.public_.course.public_.student.StudentSqlAdapter;
import com.company.public_.course.public_.task.TaskManagerImpl;
import com.company.public_.course.public_.task.TaskSqlAdapter;
import com.company.public_.course.public_.task_array.TaskArrayManagerImpl;
import com.company.public_.course.public_.task_array.TaskArraySqlAdapter;
import com.company.public_.course.public_.variant.VariantManagerImpl;
import com.company.public_.course.public_.variant.VariantSqlAdapter;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.common.injector.Injector;
import com.speedment.runtime.application.AbstractApplicationBuilder;
import com.speedment.runtime.connector.postgres.PostgresBundle;

/**
 * A generated base {@link
 * com.speedment.runtime.application.AbstractApplicationBuilder} class for the
 * {@link com.speedment.runtime.config.Project} named public.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public abstract class GeneratedPublic_ApplicationBuilder extends AbstractApplicationBuilder<Public_Application, Public_ApplicationBuilder> {
    
    protected GeneratedPublic_ApplicationBuilder() {
        super(Public_ApplicationImpl.class, GeneratedPublic_Metadata.class);
        withManager(StudentManagerImpl.class);
        withManager(TaskManagerImpl.class);
        withManager(TaskArrayManagerImpl.class);
        withManager(VariantManagerImpl.class);
        withComponent(StudentSqlAdapter.class);
        withComponent(TaskSqlAdapter.class);
        withComponent(TaskArraySqlAdapter.class);
        withComponent(VariantSqlAdapter.class);
        withBundle(PostgresBundle.class);
        withInjectorProxy(new Public_InjectorProxy());
        withComponent(Public_CacheReloader.class);
    }
    
    @Override
    public Public_Application build(Injector injector) {
        return injector.getOrThrow(Public_Application.class);
    }
}