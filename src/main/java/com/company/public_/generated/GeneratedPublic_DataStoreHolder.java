package com.company.public_.generated;

import com.company.public_.course.public_.student.Student;
import com.company.public_.course.public_.student.generated.GeneratedStudentCacheHolder;
import com.company.public_.course.public_.task.Task;
import com.company.public_.course.public_.task.generated.GeneratedTaskCacheHolder;
import com.company.public_.course.public_.task_array.TaskArray;
import com.company.public_.course.public_.task_array.generated.GeneratedTaskArrayCacheHolder;
import com.company.public_.course.public_.variant.Variant;
import com.company.public_.course.public_.variant.generated.GeneratedVariantCacheHolder;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.enterprise.datastore.runtime.DataStoreHolder;
import com.speedment.enterprise.datastore.runtime.entitystore.EntityStore;
import com.speedment.enterprise.datastore.runtime.entitystore.EntityStoreHolder;
import com.speedment.enterprise.datastore.runtime.fieldcache.FieldCache;
import com.speedment.enterprise.datastore.runtime.fieldcache.MultiFieldCache;
import com.speedment.enterprise.datastore.runtime.statistic.Statistics;
import com.speedment.enterprise.datastore.runtime.util.StatisticsUtil;
import com.speedment.runtime.config.identifier.ColumnIdentifier;

import java.util.Optional;
import java.util.stream.Stream;

import static java.util.Objects.requireNonNull;

/**
 * A holder class for the various caches that are used to speed up the project.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public final class GeneratedPublic_DataStoreHolder implements DataStoreHolder {
    
    private final GeneratedStudentCacheHolder studentHolder;
    private final GeneratedTaskCacheHolder taskHolder;
    private final GeneratedTaskArrayCacheHolder taskArrayHolder;
    private final GeneratedVariantCacheHolder variantHolder;
    
    public GeneratedPublic_DataStoreHolder(
            GeneratedStudentCacheHolder studentHolder,
            GeneratedTaskCacheHolder taskHolder,
            GeneratedTaskArrayCacheHolder taskArrayHolder,
            GeneratedVariantCacheHolder variantHolder) {
        this.studentHolder   = requireNonNull(studentHolder);
        this.taskHolder      = requireNonNull(taskHolder);
        this.taskArrayHolder = requireNonNull(taskArrayHolder);
        this.variantHolder   = requireNonNull(variantHolder);
    }
    
    @Override
    @SuppressWarnings("unchecked")
    public <ENTITY> EntityStore<ENTITY> getEntityStore(
            String dbmsName,
            String schemaName,
            String tableName) {
        switch (tableName) {
            case "student"    : return (EntityStore<ENTITY>) studentHolder.getEntityStore();
            case "task"       : return (EntityStore<ENTITY>) taskHolder.getEntityStore();
            case "task_array" : return (EntityStore<ENTITY>) taskArrayHolder.getEntityStore();
            case "variant"    : return (EntityStore<ENTITY>) variantHolder.getEntityStore();
            default : throw new UnsupportedOperationException(
                String.format("Could not find '%s' in database model.", tableName)
            );
        }
    }
    
    @Override
    @SuppressWarnings("unchecked")
    public <ENTITY, CACHE extends FieldCache<CACHE>> CACHE getFieldCache(ColumnIdentifier<ENTITY> columnId) {
        switch (columnId.getTableId()) {
            case "student"    : return (CACHE) studentHolder.getFieldCache((ColumnIdentifier<Student>) columnId);
            case "task"       : return (CACHE) taskHolder.getFieldCache((ColumnIdentifier<Task>) columnId);
            case "task_array" : return (CACHE) taskArrayHolder.getFieldCache((ColumnIdentifier<TaskArray>) columnId);
            case "variant"    : return (CACHE) variantHolder.getFieldCache((ColumnIdentifier<Variant>) columnId);
            default : throw new UnsupportedOperationException(
                String.format("Could not find '%s' in database model.", columnId.getTableId())
            );
        }
    }
    
    @Override
    @SuppressWarnings("unchecked")
    public <ENTITY, T0, T1, CACHE extends MultiFieldCache<T0, T1, CACHE>> Optional<CACHE> getMultiFieldCache(ColumnIdentifier<ENTITY> firstColumnId, ColumnIdentifier<ENTITY> secondColumnId) {
        return Optional.empty(); // No multi-indexes are used in the project
    }
    
    @Override
    @SuppressWarnings("unchecked")
    public <ENTITY> boolean isHavingMultiFieldCache(ColumnIdentifier<ENTITY> columnId) {
        return false; // No multi-indexes are used in the project
    }
    
    @Override
    public void close() {
        holders().forEach(EntityStoreHolder::close);
    }
    
    @Override
    public Statistics getStatistics() {
        return StatisticsUtil.create(
            holders()
                .toArray(EntityStoreHolder[]::new)
        );
    }
    
    @Override
    public Stream<EntityStoreHolder<?>> holders() {
        return Stream.of(
            studentHolder,
            taskHolder,
            taskArrayHolder,
            variantHolder
        );
    }
}