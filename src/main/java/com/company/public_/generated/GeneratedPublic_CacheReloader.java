package com.company.public_.generated;

import com.company.public_.course.public_.student.generated.GeneratedStudentCacheHolder;
import com.company.public_.course.public_.task.generated.GeneratedTaskCacheHolder;
import com.company.public_.course.public_.task_array.generated.GeneratedTaskArrayCacheHolder;
import com.company.public_.course.public_.variant.generated.GeneratedVariantCacheHolder;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.enterprise.datastore.runtime.DataStoreHolder;
import com.speedment.enterprise.datastore.runtime.DataStoreReloader;
import com.speedment.enterprise.datastore.runtime.util.DataStoreHolderUtil;
import com.speedment.runtime.core.component.StreamSupplierComponent;

import java.util.concurrent.CompletableFuture;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.ExecutorService;

/**
 * A reloader that loads updates from a stream source and creates a new holder
 * for that state.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public abstract class GeneratedPublic_CacheReloader implements DataStoreReloader {
    
    @Override
    public DataStoreHolder reload(StreamSupplierComponent streamSupplier, ExecutorService executor) {
        final CompletableFuture<GeneratedStudentCacheHolder> studentHolder      = GeneratedStudentCacheHolder.reload(streamSupplier, executor);
        final CompletableFuture<GeneratedTaskCacheHolder> taskHolder            = GeneratedTaskCacheHolder.reload(streamSupplier, executor);
        final CompletableFuture<GeneratedTaskArrayCacheHolder> taskArrayHolder  = GeneratedTaskArrayCacheHolder.reload(streamSupplier, executor);
        final CompletableFuture<GeneratedVariantCacheHolder> variantHolder      = GeneratedVariantCacheHolder.reload(streamSupplier, executor);
        
        final DataStoreHolder holder;
        try {
            holder = new GeneratedPublic_DataStoreHolder(
                studentHolder.get(),
                taskHolder.get(),
                taskArrayHolder.get(),
                variantHolder.get()
            );
        } catch (final ExecutionException | InterruptedException ex) {
            throw new RuntimeException("Error reloading caches.", ex);
        }
        
        DataStoreHolderUtil.decorateEntityStores(holder, executor);
        return holder;
    }
}